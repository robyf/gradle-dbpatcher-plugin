buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.5"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.1"
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "com.gradle.plugin-publish"

wrapper {
    gradleVersion = '3.1'
}

group = 'net.robyf'
archivesBaseName = 'gradle-dbpatcher-plugin'

ext.majorVersion = 1
ext.minorVersion = 0

def computeVersionNumber() {
    def computedVersion
    ext.env = System.getenv()
    ext.branchName = env.BRANCH_NAME
    if (ext.branchName == "master") {
        ext.buildNumber = env.BUILD_NUMBER?.toInteger()
        computedVersion = "${majorVersion}.${minorVersion}.${buildNumber}"
    } else {
        computedVersion = "${majorVersion}.${minorVersion}-SNAPSHOT"
    }
    return computedVersion
}

version = computeVersionNumber()
ext.isSnapshot = version.endsWith("SNAPSHOT")

if ( isSnapshot ) {
    println "Using snapshot repository for artifact uploads"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    println "Using staging repository for artifact uploads"
    ext.mavenCentralUploadUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

configurations {
    archives
}

task sourceJar(type: Jar) {
    description = "An archive of the source code for Maven Central"
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar) {
    description = "An archive of the GroovyDocs for Maven Central"
    classifier = 'javadoc'
    from groovydoc
}

artifacts {
    archives jar, groovydocJar, sourceJar
}

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile group: 'net.robyf', name: 'dbpatcher', version: '1.0.1'
    testCompile 'junit:junit:4.12'
}

signing {
    sign configurations.archives
}

uploadArchives {
    if (gradle.startParameter.taskNames.contains("uploadArchives")) {
        repositories {
            mavenDeployer {
                if (signing.signatory) {
                    beforeDeployment {
                        signing.signPom(it)
                    }
                }
                configuration = configurations.archives
                repository(url: mavenCentralUploadUrl) {
                    authentication(userName: mavenUsername, password: mavenPassword)
                    releases(updatePolicy: "always")
                    snapshots(updatePolicy: "always")
                }
                pom.project(pomConfiguration)
            }
        }
    }
}

def getPomConfiguration() {
    return {
        name 'DBPatcher Gradle Plugin'
        packaging 'jar'
        description 'A Gradle plugin for the dbpatcher database patching tool.'
        url 'https://github.com/robyf/gradle-dbpatcher-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'robyf'
                name 'Roberto Fasciolo'
                email 'rob@robyf.net'
            }
        }
        scm {
            connection 'scm:https://robyf@github.com/robyf/gradle-dbpatcher-plugin'
            developerConnection 'scm:git@github.com:robyf/gradle-dbpatcher-plugin.git'
            url 'https://github.com/robyf/gradle-dbpatcher-plugin'
        }
    }
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey

    configurations = [ 'archives' ]

    pkg {
        repo = 'maven-repo'
        name = 'gradle-dbpatcher-plugin'
        desc = 'A Gradle plugin for the dbpatcher database patching tool.'
        licenses = [ 'Apache-2.0' ]
        websiteUrl = 'https://github.com/robyf/gradle-dbpatcher-plugin'
        issueTrackerUrl = 'https://github.com/robyf/gradle-dbpatcher-plugin/issues'
        vcsUrl = 'https://github.com/robyf/gradle-dbpatcher-plugin.git'
        labels = [ 'gradle', 'dbpatcher' ]
        publicDownloadNumbers = true
        version {
            name = version
            // vcsTag = version
            attributes = [
                'gradle-plugin': 'net.robyf.dbpatcher:net.robyf:gradle-dbpatcher-plugin'
            ]
        }
    }
}

pluginBundle {
    website = 'https://github.com/robyf/gradle-dbpatcher-plugin'
    vcsUrl = 'https://github.com/robyf/gradle-dbpatcher-plugin.git'
    description = 'A Gradle plugin for the dbpatcher database patching tool.'
    tags = [ 'gradle', 'dbpatcher' ]

    plugins {
        gradleLiquibasePlugin {
            id = 'net.robyf.dbpatcher'
            displayName = 'Dbpatcher Gradle plugin'
        }
    }
}
